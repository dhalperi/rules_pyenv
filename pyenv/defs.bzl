load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

BUILD_FILE_CONTENT = """# This file was automatically generated by @dpu_rules_pyenv//pyenv:defs.bzl
package(default_visibility = ["//visibility:public"])

load("@bazel_tools//tools/python:toolchain.bzl", "py_runtime_pair")

py_runtime(
    name = "python_{py2}_runtime",
    files = glob(["versions/{py2}/**/*"], exclude_directories = 0),
    interpreter = "versions/{py2}/bin/python",
    python_version = "PY2"
)

py_runtime(
    name = "python_{py3}_runtime",
    files = glob(["versions/{py3}/**/*"], exclude_directories = 0),
    interpreter = "versions/{py3}/bin/python",
    python_version = "PY3"
)

py_runtime_pair(
    name = "runtimes",
    py2_runtime = "@pyenv//:python_{py2}_runtime",
    py3_runtime = "@pyenv//:python_{py3}_runtime",
)

toolchain(
    name = "python_toolchain",
    toolchain = ":runtimes",
    toolchain_type = "@bazel_tools//tools/python:toolchain_type",
)
"""

def _download_pyenv(repository_ctx):
    """Used to download a pyenv version.
    Args:
      repository_ctx: The repository rule context
    """

    pyenv_version = repository_ctx.attr._pyenv_version
    pyenv_repositories = repository_ctx.attr._pyenv_repositories
    os_family = "unix" if repository_ctx.os.name.lower().find("windows") == -1 else "windows"
    version_os = "%s-%s" % (pyenv_version, os_family)

    if version_os in pyenv_repositories:
        url, strip_prefix, sha256 = pyenv_repositories[version_os]
    else:
        fail("Unknown pyenv version %s" % pyenv_version)

    repository_ctx.download_and_extract(
        url = [url],
        output = "./",
        stripPrefix = strip_prefix,
        sha256 = sha256,
    )

def _setup_pyenv(repository_ctx):
    """Used to setup pyenv.
    Args:
      repository_ctx: The repository rule context
    """
    repository_ctx.report_progress("Preparing pyenv")
    pyenv_path = repository_ctx.which("pyenv")

    if not pyenv_path or repository_ctx.attr.hermetic:
        _download_pyenv(repository_ctx)
    else:
        pyenv_root = repository_ctx.execute([pyenv_path, "root"]).stdout.lower().strip()
        if not pyenv_root:
            fail("Unable to find PYENV_ROOT")

        repository_ctx.symlink(pyenv_path, "bin/pyenv")
        repository_ctx.symlink("{pyenv_root}/versions".format(pyenv_root = pyenv_root), "versions")

def _install_python(repository_ctx, version):
    if not version.startswith("2") and not version.startswith("3"):
        fail("pyenv_install currently only supports cpython major versions 2 and 3")

    repository_ctx.report_progress("Installing Python %s" % version)
    pyenv_root = repository_ctx.path("./bin/pyenv").realpath.dirname.dirname
    res = repository_ctx.execute(["bin/pyenv", "install", "-s", version], environment = {"PYENV_ROOT": str(pyenv_root)})

    if res.return_code:
        fail("pyenv failed to install version %s" % version + res.stdout + res.stderr)

def _setup_build_file(repository_ctx, py2, py3):
    repository_ctx.file(
        "BUILD.bazel",
        content = BUILD_FILE_CONTENT.format(py2 = py2, py3 = py3),
    )

def _pyenv_install_impl(repository_ctx):
    py2 = repository_ctx.attr.py2_version
    py3 = repository_ctx.attr.py3_version

    _setup_pyenv(repository_ctx)
    _install_python(repository_ctx, py2)
    _install_python(repository_ctx, py3)
    _setup_build_file(repository_ctx, py2, py3)

_pyenv_install = repository_rule(
    _pyenv_install_impl,
    attrs = {
        "py2_version": attr.string(mandatory = True),
        "py3_version": attr.string(mandatory = True),
        "hermetic": attr.bool(mandatory = True),
        # NOTE: Users may care about these private attributes at some point
        "_pyenv_version": attr.string(
            default = "1.2",
        ),
        "_pyenv_repositories": attr.string_list_dict(
            default = {
                "1.2-unix": (
                    "https://github.com/pyenv/pyenv/archive/v1.2.18.tar.gz",
                    "pyenv-1.2.18",
                    "cc147f020178bb2f1ce0a8b9acb0bdf73979d967ce7d7415e22746e84e0eec7a",
                ),
                "1.2-windows": (
                    "https://github.com/pyenv-win/pyenv-win/archive/v1.2.4.tar.gz",
                    "pyenv-win-1.2.4",
                    "0f3d3851eb692335c443a54700ffd99f0066f51c3b94ab0a867174c83f749554",
                ),
            },
        ),
    },
)

def pyenv_install(py2, py3, hermetic = True):
    """
    Macro to install and register a py_runtime_pair.
    """

    maybe(
        _pyenv_install,
        name = "pyenv",
        py2_version = py2,
        py3_version = py3,
        hermetic = hermetic,
    )

    native.register_toolchains("@pyenv//:python_toolchain")
